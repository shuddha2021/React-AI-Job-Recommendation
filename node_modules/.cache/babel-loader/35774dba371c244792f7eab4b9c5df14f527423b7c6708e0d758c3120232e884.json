{"ast":null,"code":"var _jsxFileName = \"/Users/shuddha/Desktop/hello123-main/src/Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Chatbot() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [chatbotVisible, setChatbotVisible] = useState(true); // State to track chatbot visibility\n  const [welcomeShown, setWelcomeShown] = useState(false); // State to track if the welcome message has been shown\n\n  const botName = \"JobBot\"; // Name of the chatbot\n\n  const chatbotRef = useRef(null);\n  const addMessage = function (text) {\n    let isUser = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    setMessages(prevMessages => [...prevMessages, {\n      text,\n      isUser,\n      timestamp: new Date().toISOString()\n    }]);\n  };\n  useEffect(() => {\n    // Show the welcome message only if it hasn't been shown before\n    if (!welcomeShown) {\n      addMessage(`Hello! I'm ${botName}, your job application assistant. How can I help you?`);\n      setWelcomeShown(true);\n    }\n  }, [welcomeShown]);\n  const handleUserMessage = () => {\n    if (inputValue.trim() === \"\") return;\n    addMessage(inputValue, true);\n    // Implement logic to handle user input (e.g., answer questions, provide tips, etc.)\n    setInputValue(\"\");\n  };\n\n  // ... Other functions and useEffects for handling messages ...\n\n  const handleMinimize = () => {\n    setChatbotVisible(prevState => !prevState); // Toggle chatbot visibility\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `chatbot ${chatbotVisible ? \"visible\" : \"hidden\"}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-header\",\n      children: [botName, chatbotVisible ? /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"minimize-button\",\n        onClick: handleMinimize,\n        children: \"Minimize\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"maximize-button\",\n        onClick: handleMinimize,\n        children: \"Maximize\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), chatbotVisible && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-messages\",\n        ref: chatbotRef,\n        children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${message.isUser ? \"user\" : \"bot\"}`,\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"message-text\",\n            children: message.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 33\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbot-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value),\n          placeholder: \"Type your message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleUserMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n}\n_s(Chatbot, \"mSD3iywPrAZA1enLJMJt11XJh24=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Fragment","_Fragment","Chatbot","_s","messages","setMessages","inputValue","setInputValue","chatbotVisible","setChatbotVisible","welcomeShown","setWelcomeShown","botName","chatbotRef","addMessage","text","isUser","arguments","length","undefined","prevMessages","timestamp","Date","toISOString","handleUserMessage","trim","handleMinimize","prevState","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","ref","map","message","index","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["/Users/shuddha/Desktop/hello123-main/src/Chatbot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\n\nfunction Chatbot() {\n    const [messages, setMessages] = useState([]);\n    const [inputValue, setInputValue] = useState(\"\");\n    const [chatbotVisible, setChatbotVisible] = useState(true); // State to track chatbot visibility\n    const [welcomeShown, setWelcomeShown] = useState(false); // State to track if the welcome message has been shown\n\n    const botName = \"JobBot\"; // Name of the chatbot\n\n    const chatbotRef = useRef(null);\n\n    const addMessage = (text, isUser = false) => {\n        setMessages((prevMessages) => [\n            ...prevMessages,\n            { text, isUser, timestamp: new Date().toISOString() },\n        ]);\n    };\n\n    useEffect(() => {\n        // Show the welcome message only if it hasn't been shown before\n        if (!welcomeShown) {\n            addMessage(`Hello! I'm ${botName}, your job application assistant. How can I help you?`);\n            setWelcomeShown(true);\n        }\n    }, [welcomeShown]);\n\n    const handleUserMessage = () => {\n        if (inputValue.trim() === \"\") return;\n        addMessage(inputValue, true);\n        // Implement logic to handle user input (e.g., answer questions, provide tips, etc.)\n        setInputValue(\"\");\n    };\n\n    // ... Other functions and useEffects for handling messages ...\n\n    const handleMinimize = () => {\n        setChatbotVisible((prevState) => !prevState); // Toggle chatbot visibility\n    };\n\n    return (\n        <div className={`chatbot ${chatbotVisible ? \"visible\" : \"hidden\"}`}>\n            <div className=\"chatbot-header\">\n                {botName}\n                {chatbotVisible ? (\n                    <button className=\"minimize-button\" onClick={handleMinimize}>\n                        Minimize\n                    </button>\n                ) : (\n                    <button className=\"maximize-button\" onClick={handleMinimize}>\n                        Maximize\n                    </button>\n                )}\n            </div>\n            {chatbotVisible && (\n                <>\n                    <div className=\"chatbot-messages\" ref={chatbotRef}>\n                        {messages.map((message, index) => (\n                            <div key={index} className={`message ${message.isUser ? \"user\" : \"bot\"}`}>\n                                <span className=\"message-text\">{message.text}</span>\n                            </div>\n                        ))}\n                    </div>\n                    <div className=\"chatbot-input\">\n                        <input\n                            type=\"text\"\n                            value={inputValue}\n                            onChange={(e) => setInputValue(e.target.value)}\n                            placeholder=\"Type your message...\"\n                        />\n                        <button onClick={handleUserMessage}>Send</button>\n                    </div>\n                </>\n            )}\n        </div>\n    );\n}\n\nexport default Chatbot;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}